# $Id: pqf.properties,v 1.2 2002-11-06 10:37:06 mike Exp $
#
# Propeties file to drive org.z3950.zing.cql.CQLNode's toPQF()
# back-end.  This specifies the interpretation of various CQL
# qualifiers in terms of Type-1 query attributes.
#
# See http://www.loc.gov/z3950/agency/zing/srwu/dc-indexes.html
# for the Maintenance Agency's work-in-progress mapping of Dublic Core
# qualifiers to Attribute Architecture (util, XD and BIB-2)
# attributes.
#
dc.title			= 1=4
dc.subject			= 1=21
dc.creator			= 1=1003
dc.editor			= 1=1020
dc.publisher			= 1=1018
dc.description			= 1=62	# "abstract"
dc.date				= 1=30
dc.resourceType			= 1=1031	# guesswork: "Material-type"
dc.format			= 1=1034	# guesswork: "Content-type"
dc.resourceIdentifier		= 1=12	# "Local number"
dc.source			= 1=1019	# "Record-source"
dc.language			= 1=54	# "Code--language"
dc.relation			= 1=?	###
dc.coverage			= 1=?	###
dc.rights			= 1=?	###
#
# Aside from the mainstream qualifiers -- the Dublin Core stuff, Bath
# Profile stuff and suchlike -- this file may also specific a few
# special qualifiers in the "cql-java" pseudo-qualifier-set, and these
# affect the translation of qualifiers into Type-1 attributes as
# follows:
#
# Relation attributes are selected according to the CQL relation by
# looking up the "cql-java.relation.<relation>" property:
#
cql-java.relation.<		= 2=1
cql-java.relation.<=		= 2=2
cql-java.relation.=		= 2=3
cql-java.relation.exact		= 2=3
cql-java.relation.>=		= 2=4
cql-java.relation.>		= 2=5
cql-java.relation.<>		= 2=6
#
#	### Should add support for relation modifiers
#
# Position attributes may be specified for anchored terms (those
# beginning with "^", which is stripped) and unanchored (those not
# beginning with "^").  This may change when we get a BIB-1 truncation
# attribute that says "do what CQL does".
#
cql-java.position.anchored	= 3=1	# "first in field"
cql-java.position.unanchored	= 3=3	# "any position in field"
#
# Structure attributes may be specified for individual relations; a
# default structure attribute my be specified by the pseudo-relation
# "*", to be used whenever a relation not listed here occurs.
#
cql-java.structure.exact	= 4=108	# phrase
cql-java.structure.*		= 4=1	# phrase
#
# Finally, any additional attributes that should always be included
# with each term can be specified in the "cql-java.always" property.
#
cql-java.always			= 5=104 6=1
# 5=104: some kind of vaguely CQL-like masking, IIRC.
# 6=1: completeness = incomplete subfield
